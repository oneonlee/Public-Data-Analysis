# -*- coding: utf-8 -*-
"""Analysis of COVID-19 Data in Seoul.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10blbnOeh5VWF6JTo9ytsxcTUpfiIWng8
"""

!apt-get update -qq
!apt-get install fonts-nanum* -qq

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import warnings
warnings.filterwarnings(action='ignore') 

path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf' # 나눔 고딕
font_name = fm.FontProperties(fname=path, size=10).get_name() # 기본 폰트 사이즈 : 10
plt.rc('font', family=font_name)
plt.rcParams['axes.unicode_minus']=False
fm._rebuild()

import csv
import matplotlib.pyplot as plt
f=open('COVID-19 Data in Seoul.csv',encoding='cp949')
data=csv.reader(f)
next(data)
data=list(data)

cured=[]

dates=[]
labels=[]
max=[]

for row in data:
  date=row[0]
  year=date[:4]
  month=date[5:7]
  day=date[8:10]
  if row[4]!='' and row[5]!='0':
    dates.append(date)
    cured.append(int(row[5]))
    if day=='14':
      labels.append(date)
    else:
      labels.append('')
    

plt.figure(figsize = (10,5), dpi=100)   
plt.title('서울특별시 코로나 19 퇴원자수 데이터')
plt.plot(dates,cured,color='blue',label='퇴원자 수')
plt.legend()
plt.xticks(labels, label=labels, rotation=90)
plt.yscale('log')
plt.gca().invert_xaxis()
plt.show()

deaths=[]
cases=[]
dates=[]
labels=[]
max=[]
for row in data:
  date=row[0]
  year=date[:4]
  month=date[5:7]
  day=date[8:10]
  dates.append(date)
  deaths.append(int(row[6]))
  cases.append(int(row[2]))
  if day=='14':
    labels.append(date)
  else:
    labels.append('')

plt.figure(figsize = (10,5), dpi=100)   
plt.title('서울특별시 코로나 19 사망자수 데이터')
plt.plot(dates,deaths,color='black',label='사망자 수')
plt.legend()
plt.xticks(labels, label=labels, rotation=90)
plt.yscale('log')
plt.gca().invert_xaxis()
plt.show()

plt.figure(figsize = (10,5), dpi=100)   
plt.title('서울특별시 코로나 19 확진 데이터')
plt.plot(dates,cases,color='red',label='확진자 수')
plt.legend()
plt.xticks(labels, label=labels, rotation=90)  
plt.yscale('log')
plt.gca().invert_xaxis()
plt.show()

